import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.cc795e4d.js";const q=JSON.parse('{"title":"模板语法","description":"","frontmatter":{},"headers":[],"relativePath":"docs/004-template-syntax.md","filePath":"docs/004-template-syntax.md"}'),p={name:"docs/004-template-syntax.md"},l=n(`<h1 id="模板语法" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法" aria-label="Permalink to &quot;模板语法&quot;">​</a></h1><p>脚本中可以使用模板语法，模板语法是被 <code>&lt;% %&gt;</code> 所包裹的内容，这部分内容可以插入合法的 JavaScript (NodeJs) 脚本，将会被执行。</p><p>如果添加等号，内容将会被输出，例如 <code>&lt;%= 1 + 1 %&gt;</code> 将会输出 <code>2</code>。</p><h2 id="脚本中插入变量" tabindex="-1">脚本中插入变量 <a class="header-anchor" href="#脚本中插入变量" aria-label="Permalink to &quot;脚本中插入变量&quot;">​</a></h2><p>脚本支持模板语法，可通过 <code>&lt;%= yourVar %&gt;</code> 的方式插入变量。</p><p>默认的变量有所有的环境变量的值，以及两个特殊变量，<code>args</code> 和 <code>argsArr</code>：</p><p><code>args</code> 是字符串，代表用户所输入的额外参数，如 <code>co say hello world</code> 中的 <code>hello world</code>。</p><p><code>argsArr</code> 是其的数组形式，如 <code>[&quot;hello&quot;, &quot;world&quot;]</code>。</p><p>例如，我们可以像下面这样，将用户输入的参数，来输出：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;say&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">commands = [</span><span style="color:#9ECBFF;">&quot;say&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;speak&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">scripts = [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;echo &#39;&lt;%= args %&gt;&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;say&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">commands = [</span><span style="color:#032F62;">&quot;say&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;speak&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">scripts = [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;echo &#39;&lt;%= args %&gt;&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="脚本中插入表达式" tabindex="-1">脚本中插入表达式 <a class="header-anchor" href="#脚本中插入表达式" aria-label="Permalink to &quot;脚本中插入表达式&quot;">​</a></h2><p>脚本运行在 JavaScript (NodeJs) 环境中，因此支持任何 JavaScript 表达式，例如，你可以根据时间不同，来输出上午好或下午好：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;say&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">commands = [</span><span style="color:#9ECBFF;">&quot;say&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;speak&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">scripts = [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;echo &#39;&lt;%= new Date().getHours() &gt; 12 ? &#39;☀️Good morning!&#39; : &#39;🌖Good afternoon!&#39; %&gt;&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;say&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">commands = [</span><span style="color:#032F62;">&quot;say&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;speak&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">scripts = [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;echo &#39;&lt;%= new Date().getHours() &gt; 12 ? &#39;☀️Good morning!&#39; : &#39;🌖Good afternoon!&#39; %&gt;&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="脚本中插入-javascript" tabindex="-1">脚本中插入 JavaScript <a class="header-anchor" href="#脚本中插入-javascript" aria-label="Permalink to &quot;脚本中插入 JavaScript&quot;">​</a></h2><p>你甚至可以直接在里面编写 JavaScript 代码，实现流程控制。</p><p><code>&lt;% %&gt;</code> 之间的代码将会被执行，而 <code>&lt;%= %&gt;</code> 之间的代码将会被输出。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;say&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">commands = [</span><span style="color:#9ECBFF;">&quot;say&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;speak&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">scripts = [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;% if (new Date().getHours() &gt; 12) {%&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        echo &#39;☀️Good morning!&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;% } else {%&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        echo &#39;🌖Good afternoon!&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;% } %&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;say&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">commands = [</span><span style="color:#032F62;">&quot;say&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;speak&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">scripts = [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;% if (new Date().getHours() &gt; 12) {%&gt;</span></span>
<span class="line"><span style="color:#032F62;">        echo &#39;☀️Good morning!&#39;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;% } else {%&gt;</span></span>
<span class="line"><span style="color:#032F62;">        echo &#39;🌖Good afternoon!&#39;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;% } %&gt;</span></span>
<span class="line"><span style="color:#032F62;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>注意，以上代码示例中，使用了三个连续的引号 <code>&#39;&#39;&#39;</code> 代表多行字符串，这是 TOML 的语法。</p><p><code>co</code> 会自动删掉<strong>所有的换行</strong>，并删除每行前面的空格。你在编写脚本时，不需要担心换行符和空格的影响，可以自由换行。</p><h2 id="该使用模板语法吗" tabindex="-1">该使用模板语法吗？ <a class="header-anchor" href="#该使用模板语法吗" aria-label="Permalink to &quot;该使用模板语法吗？&quot;">​</a></h2><p>在 <code>co</code> 中引入模板语法，是为了尽可能地让配置可以兼容多个平台。如果你的团队中有些人用 Mac 而有些人用 Windows，这将会是一件很头疼的事情。</p><p>同时，也为了提高脚本的表达能力，让你可以在脚本中编写更加复杂的逻辑。编写 JavaScript 代码，比编写 shell 脚本，要简单得多，且可以在不同系统下正常运行。</p><p>但是模板语法并不是最好的选择，它没有高亮，也没有代码提示和语法检查，这将会让你在编写较复杂的脚本时，感到很不舒服。</p><p>如果你认为所要编写的脚步逻辑复杂到了使用模板语法感到吃力的情况时，请考虑是否使用你熟悉的脚本语言来编写脚本，然后通过 <code>co</code> 来执行这个脚本。</p><h2 id="mixins" tabindex="-1">Mixins <a class="header-anchor" href="#mixins" aria-label="Permalink to &quot;Mixins&quot;">​</a></h2><p>你可以通过 <code>mixins</code> 来载入其他的 <code>toml</code> 文件，<code>mixins</code> 命令固定写在名为 <code>general</code> 的组中。</p><p>其中，<code>mixin</code> 可以是一个相对路径，或是一个基于 <code>home</code> 目录的路径，也可以是一个绝对路径，或一个网络地址 (<code>http://</code> 或 <code>https://</code>)。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;general&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">mixins = [</span><span style="color:#9ECBFF;">&quot;./foo.toml&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;~/.co.toml&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/foo/bar/baz.toml&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;say&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">commands = [</span><span style="color:#9ECBFF;">&quot;say&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;speak&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">scripts = [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;echo hello world&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;general&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">mixins = [</span><span style="color:#032F62;">&quot;./foo.toml&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;~/.co.toml&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/foo/bar/baz.toml&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;say&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">commands = [</span><span style="color:#032F62;">&quot;say&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;speak&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">scripts = [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;echo hello world&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="config-presets" tabindex="-1">Config presets <a class="header-anchor" href="#config-presets" aria-label="Permalink to &quot;Config presets&quot;">​</a></h2><p>配置预设是 <code>co</code> 官方提供的一些配置，它能够简化你使用许多命令的方式。目前，我们为了 JavaScript 的各种包管理器提供了预设。</p><p><code>mixins</code> 还可以加载配置预设，配置预设被嵌入在了 <code>co</code> 的二进制文件中，使用时以 <code>co:</code> 开头。</p><p>目前的配置预设有：</p><ul><li><code>npm</code>, <code>yarn</code>, <code>pnpm</code>, <code>bun</code></li></ul><p>例如，我在项目中使用 <code>yarn</code>，但我懒得记住 <code>yarn</code> 的命令，我可以通过引入 <code>co</code> 提供的 <code>yarn</code> 配置预设：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;general&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">mixins = [</span><span style="color:#9ECBFF;">&quot;co:yarn&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;general&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">mixins = [</span><span style="color:#032F62;">&quot;co:yarn&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>现在，我只要输入 <code>co i lodash</code>，就可以安装 <code>lodash</code> 了。</p>`,36),e=[l];function t(c,r,E,i,d,y){return a(),o("div",null,e)}const h=s(p,[["render",t]]);export{q as __pageData,h as default};
