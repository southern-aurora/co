import{_ as a,o as s,c as o,Q as e}from"./chunks/framework.cc795e4d.js";const u=JSON.parse('{"title":"指南","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/000-guide.md","filePath":"docs/000-guide.md"}'),p={name:"docs/000-guide.md"},c=e('<h1 id="指南" tabindex="-1">指南 <a class="header-anchor" href="#指南" aria-label="Permalink to &quot;指南&quot;">​</a></h1><p>为你冗长繁杂的脚本们设置一个简单易记的别名！</p><h2 id="co-能做到什么" tabindex="-1">co 能做到什么 <a class="header-anchor" href="#co-能做到什么" aria-label="Permalink to &quot;co 能做到什么&quot;">​</a></h2><p>co 是一个命令别名工具，能够帮助你将一系列命令，变为一个简单易记的别名。</p><p>假设我正在编写一个 <code>deno</code> 工程，我每次都要输入这些命令来启动：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./src</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">deno</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--allow-all</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./src</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">deno</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--allow-all</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.ts</span></span></code></pre></div><p>现在，我可以通过 <code>co</code> 来简化命令，使它只需要简单的几个字符即可启动！</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">co</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">co</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span></code></pre></div><p>实现这样的魔法只需要简单地编写一个配置文件！而配置文件将存放在你工程的根目录中，因此，对所有此工程的开发者，可以同样受益！</p><h2 id="获得统一的包管理器命令-对于-javascript-开发者" tabindex="-1">获得统一的包管理器命令 (对于 JavaScript 开发者) <a class="header-anchor" href="#获得统一的包管理器命令-对于-javascript-开发者" aria-label="Permalink to &quot;获得统一的包管理器命令 (对于 JavaScript 开发者)&quot;">​</a></h2><p>我是一个 JavaScript 开发者。在 JavaScript 社区中，有许多包管理器，例如 <code>npm</code>、<code>yarn</code>、<code>pnpm</code>、<code>bun</code> 等等。</p><p>在不同的项目中，安装一个包之前，首先要回忆这个项目所使用的包管理器，然后再运行相应的命令。</p><p>由于肌肉记忆，我经常习惯性地在那些 <code>yarn</code>、<code>pnpm</code>、<code>bun</code> 项目中错误运行 <code>npm i</code>，这种感觉实在是太痛苦了……</p><p><code>co</code> 内置了针对这些包管理器的模板，你可以通过一套相同的命令，来自由地根据不同项目，执行不同的包管理器命令。</p><p>例如，你可以通过 <code>co i</code> 来安装包，而不需要再继续承受努力回忆这个项目该使用 <code>npm i</code>、<code>yarn</code>、<code>pnpm i</code>、<code>bun i</code> 其中哪个的痛苦。</p>',15),n=[c];function l(t,d,r,i,h,y){return s(),o("div",null,n)}const _=a(p,[["render",l]]);export{u as __pageData,_ as default};
