import{_ as s,o,c as a,Q as n}from"./chunks/framework.cc795e4d.js";const h=JSON.parse('{"title":"自定义命令","description":"","frontmatter":{},"headers":[],"relativePath":"docs/003-custom-commands.md","filePath":"docs/003-custom-commands.md"}'),l={name:"docs/003-custom-commands.md"},p=n(`<h1 id="自定义命令" tabindex="-1">自定义命令 <a class="header-anchor" href="#自定义命令" aria-label="Permalink to &quot;自定义命令&quot;">​</a></h1><p>你在<a href="/docs/001-install.html">安装</a>章节中，成功初始化了 <code>co</code>，并获得了一个 <code>.co.toml</code> 文件。</p><p>在 <code>.co.toml</code> 文件中，你可以自定义命令，功能非常强大。</p><p>一个简单的 <code>Hello World</code> 命令如下：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;say&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">commands = [</span><span style="color:#9ECBFF;">&quot;say&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;speak&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">scripts = [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;echo &#39;hello world&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;say&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">commands = [</span><span style="color:#032F62;">&quot;say&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;speak&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">scripts = [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;echo &#39;hello world&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>当你输入 <code>co say</code> 或 <code>co speak</code> 或 <code>co echo</code> 时，将会输出：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">world</span></span></code></pre></div><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>你可以在 <code>env</code> 中定义额外的环境变量，这样你就不必考虑在不同系统下设置环境变量的脚本兼容性问题了。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;say&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">env = { SAY1 = </span><span style="color:#9ECBFF;">&quot;hello world 1&quot;</span><span style="color:#E1E4E8;">, SAY2 = </span><span style="color:#9ECBFF;">&quot;hello world 2&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">commands = [</span><span style="color:#9ECBFF;">&quot;say&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;speak&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">scripts = [</span><span style="color:#9ECBFF;">&quot;echo $SAY1&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;say&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">env = { SAY1 = </span><span style="color:#032F62;">&quot;hello world 1&quot;</span><span style="color:#24292E;">, SAY2 = </span><span style="color:#032F62;">&quot;hello world 2&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">commands = [</span><span style="color:#032F62;">&quot;say&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;speak&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">scripts = [</span><span style="color:#032F62;">&quot;echo $SAY1&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="多条脚本" tabindex="-1">多条脚本 <a class="header-anchor" href="#多条脚本" aria-label="Permalink to &quot;多条脚本&quot;">​</a></h2><p>你可以在 <code>scripts</code> 中写入多条脚本，例如：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">&quot;say&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">commands = [</span><span style="color:#9ECBFF;">&quot;say&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;speak&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;echo&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">scripts = [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;echo &#39;hello world 1&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;echo &#39;hello world 2&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;echo &#39;hello world 3&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;say&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">commands = [</span><span style="color:#032F62;">&quot;say&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;speak&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;echo&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">scripts = [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;echo &#39;hello world 1&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;echo &#39;hello world 2&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;echo &#39;hello world 3&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>脚本将按照顺序依次执行，一旦有任一命令执行失败，将会自动终止后续命令的执行。</p><p>每条脚本都将会是全新的上下文，例如在上条脚本中设置的变量在下一条会消失、使用 <code>cd</code> 命令切换的目录将重置。</p>`,15),e=[p];function t(c,r,E,y,d,i){return o(),a("div",null,e)}const q=s(l,[["render",t]]);export{h as __pageData,q as default};
